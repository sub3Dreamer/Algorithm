using System;

namespace DP
{
    internal class Program
    {
        static void Main(string[] args)
        {
            // 점화식을 꼭 세워라(A(n) = A(n-1) + A(n-2))
            // 처음부터 코드짜려고 하지말고 케이스를 손수 그려보고 점화식을 세워라. 

            // 1 = 1 => 1
            // 2 = 1+1, 2 => 2
            // 3 = 1+1+1, 1+2, 2+1, 3 => 4
            // 4 = 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, 1+3, 3+1, 2+2 => 7
            // 5 = 1+1+1+1+1, 1+1+1+2, 1+1+2+1, 1+2+1+1, 2+1+1+1, 1+1+3, 1+3+1, 3+1+1, 1+2+2, 2+1+2, 2+2+1, 2+3, 3+2 => 13
            // 6 = 13+7+4 => 24
            // 7 = 24+13+7 => 44
            // 8 = 44+24+13 => 81
            // 9 = 81+44+24 => 149
            // 10 = 149+81+44 => 274
            // N = N-1 + N-2 + N-3

            /* 유의할 점 : 케이스를 손수 그려야하는데 문제 잘 읽어야되고 1,2 같은 작은 케이스 무시하면 안됨,
             점화식 패턴 잡는게 핵심임.. 다른방법으로 풀려고 하면 DP에서 벗어나게됨 */

            var cnt = int.Parse(Console.ReadLine());

            int[] nums = new int[cnt];
            for(int i = 0; i < cnt; i++)
            {
                nums[i] = int.Parse(Console.ReadLine());
            }

            int[] cachedNums = new int[11];

            cachedNums[0] = 0;
            cachedNums[1] = 1;
            cachedNums[2] = 2;
            cachedNums[3] = 4;

            for (int i = 0; i < nums.Length; i++)
            {
                Console.WriteLine(DP(nums[i], cachedNums));
            }
        }

        public static int DP(int n, int[] cachedNums)
        {
            if (cachedNums[n] != 0)
            {
                return cachedNums[n];
            }

            return cachedNums[n] = DP(n - 1, cachedNums) + DP(n - 2, cachedNums) + DP(n - 3, cachedNums);
        }
    }
}