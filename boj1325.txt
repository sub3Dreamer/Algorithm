using System;
using System.Collections.Generic;
using System.Text;

namespace boj1325
{
    class Program
    {
        static int _maxNum;
        static int _nodeCnt;

        static Dictionary<int, List<int>> _nodeDependencyDic = new Dictionary<int, List<int>>();

        static int _maxDist;
        static int[] _nodeMaxDist;

        static int _findDist;

        static void Main(string[] args)
        {
            string[] inputConst = Console.ReadLine().Split(' ');

            _maxNum = int.Parse(inputConst[0]);
            _nodeCnt = int.Parse(inputConst[1]);

            _nodeMaxDist = new int[_maxNum];

            for(int i = 0; i < _nodeCnt; i++)
            {
                string[] inputNode = Console.ReadLine().Split(' ');

                int rootNode = int.Parse(inputNode[0]) - 1;
                int dependencyNode = int.Parse(inputNode[1]) - 1;

                if (_nodeDependencyDic.ContainsKey(dependencyNode))
                    _nodeDependencyDic[dependencyNode].Add(rootNode);
                else
                    _nodeDependencyDic.Add(dependencyNode, new List<int>() { rootNode });
            }

            for(int i = 0; i < _maxNum; i++)
            {
                if(_nodeMaxDist[i] > 0)
                    continue;

                if (_nodeDependencyDic.ContainsKey(i))
                {
                    GetMaxDistance(i, 1);

                    if (_findDist > _maxDist)
                        _maxDist = _findDist;

                    _nodeMaxDist[i] = _findDist;
                }

                _findDist = 0;
            }

            StringBuilder sb = new StringBuilder();
            for(int i = 0; i < _nodeMaxDist.Length; i++)
            {
                if(_nodeMaxDist[i] == _maxDist)
                {
                    sb.Append((i + 1).ToString());
                    sb.Append(" ");
                }
            }

            Console.WriteLine(sb.ToString());
        }

        static void GetMaxDistance(int checkNode, int dist)
        {
            if(_nodeMaxDist[checkNode] > 0)
            {
                if (dist + _nodeMaxDist[checkNode] > _findDist)
                    _findDist = dist + _nodeMaxDist[checkNode];
            }
            else if (_nodeDependencyDic[checkNode].Count > 0)
            {
                for(int i = 0; i < _nodeDependencyDic[checkNode].Count; i++)
                {
                    var childNode = _nodeDependencyDic[checkNode][i];

                    if(_nodeMaxDist[childNode] > 0)
                    {
                        if(dist + _nodeMaxDist[childNode] > _findDist)
                            _findDist = dist + _nodeMaxDist[childNode];
                    }
                    else if(_nodeDependencyDic.ContainsKey(childNode))
                    {
                        GetMaxDistance(childNode, ++dist);
                    }
                    // 자식이 더이상 없으면 그 거리를 캐싱함
                    else
                    {
                        if(dist > _findDist)
                            _findDist = dist;
                    }
                }
            }
            else
            {
                if (dist > _findDist)
                    _findDist = dist;
                _nodeMaxDist[checkNode] = dist;
            }
        }
    }
}
